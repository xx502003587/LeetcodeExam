/*
 * 题意：
 * 某市新建了一条N个站的单向地铁，从0,1,...,N-1，对于每个乘客，假设从第S站上车，第T站下车，需要支付T-S元。
 * 目前地铁公司准备通过车站的进出人数统计应该收取的车费，根据每个站的上车人数和下车人数计算总钱数
 * 例：3个站，上车人数分别为1,2,0 下车人数分别为0,0,3
 * 第一个站上车的一个人坐了两站，共2元；第二个站上车的两个人坐了一站，共2元，输出4
 *
 * 思路：
 * 假设共有5个站，一个人从第3个站上，从第5个站下，他应付5-3=2元
 * 假设一个人从第1个站上，从第3个站下，应付3-1=2元
 * 假设一个人从第1个站上，从第5个站下，应付5-1=4元
 * 可以发现一个规律：（上述例子中4=2+2）当一个人从第n个站上，从第m个站下，需要付的钱数 m-n 可以写成另外一种形式 (m-1)-(n-1)
 * 即：这个人如果从第1个站上车，一直到第n个站下车，需要付n-1元；如果一直到第m个站下车，需要付m-1元
 * 那么n站到m站之间的路程需要付的钱数就是两者之差
 * 
 * 所以该题的逻辑是：对于每个站上车人数k_on，用人数乘以当前的站数，即如果这k_on个人从第1个站就上车，到这个站下车，需要支付的钱数
 * 对于每个站下车人数k_off，用人数乘以当前的站数，即如果这k_off个人从第1个站就上车，到这个站下车，需要支付的钱数
 * 所要求的的结果就是上述后者减去前者的值
 */

#include <iostream>
#include <vector>

using namespace std;

int main() {
    vector<int> on = {1,2,0};
    vector<int> off = {0,0,3};
    int n = on.size();

    int cost_until_on = 0;
    int cost_until_off = 0;
    for (int i = 0; i < n; ++i) {
        cost_until_on += on[i] * (i+1);
        cost_until_off += off[i] * (i+1);
    }
    int res = cost_until_off - cost_until_on;

    cout << res << endl;
    return 0;
}