/*
 * 题意：
 * 给定一个整数 (32 位有符号整数)，请编写一个函数来判断它是否是 4 的幂次方。
 *
 * 思路：
 * 4    100     1在第3位
 * 8    1000    1在第4位
 * 16   10000   1在第5位
 * 32   100000  1在第6位
 * 64   1000000 1在第7位
 * 如果一个数是4的幂，那么它的二进制中一定有且仅有一个1在奇数位置上（从右往左数），并且其他位置都是0
 * 所以需要判断这个数的奇数位置有没有1，是否只有1个1
 * 1. 判断是否只有1个1的方法是判断该数是否为2的幂
 * 因为4是2的幂，如果一个数不是2的幂，那么肯定不可能成为4的幂，而一个数如果是2的幂，那么它的二进制中就只有1个位置是1
 * 2. 判断1是否在奇数位置
 * 使用一个特殊的数和该数进行与运算，这个特殊的数的二进制表示中奇数位置都是1，偶数位置都是0
 * 由于题目给定32位整数，所以这个数就是1010101010101010101010101010101
 * 写成16进制为0x55555555
 * 
 * 根据上述两个条件的限制，如果该数和0x55555555做与运算之后还等于自身，那么这个数就是4的幂
 */

#include <iostream>
#include <algorithm>

using namespace std;

bool isPowerOfFour(int num) {
    // 小于0 或者不是2的幂，直接返回false
    if (num < 0 || num & (num-1)) {
        return false;
    }
    return num & 0x55555555;
}

int main() {
    int num = 16;
    auto ret = isPowerOfFour(num);
    cout << ret;
    return 0;
}